{"timestamp":"2025-09-22T09:00:36.757963","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-22T09:00:36.775626","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/flights_above_me.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-22T09:01:11.958549","level":"error","event":"Process timed out, PID: 160","logger":"airflow.utils.timeout.TimeoutPosix"}
{"timestamp":"2025-09-22T09:01:16.432262","level":"info","event":"Executing: \n        CREATE TABLE IF NOT EXISTS user_location (\n            location_id SERIAL PRIMARY KEY,\n            name TEXT NOT NULL,\n            lat NUMERIC NOT NULL,\n            lon NUMERIC NOT NULL,\n            radius_km NUMERIC NOT NULL DEFAULT 30\n        );\n\n        CREATE TABLE IF NOT EXISTS aircraft (\n            icao24 TEXT PRIMARY KEY,\n            manufacturer TEXT,\n            model TEXT,\n            country TEXT,\n            operator TEXT\n        );\n\n        CREATE TABLE IF NOT EXISTS flights (\n            flight_id TEXT PRIMARY KEY,\n            icao24 TEXT REFERENCES aircraft(icao24),\n            callsign TEXT,\n            dep_airport TEXT,\n            arr_airport TEXT,\n            dep_time TIMESTAMPTZ,\n            arr_time TIMESTAMPTZ,\n            source TEXT DEFAULT 'opensky'\n        );\n\n        CREATE TABLE IF NOT EXISTS state_vectors (\n            state_id SERIAL PRIMARY KEY,\n            icao24 TEXT,\n            callsign TEXT,\n            lat NUMERIC,\n            lon NUMERIC,\n            altitude NUMERIC,\n            velocity NUMERIC,\n            heading NUMERIC,\n            timestamp TIMESTAMPTZ NOT NULL,\n            raw_json JSONB\n        );\n\n        CREATE TABLE IF NOT EXISTS nearby_flights (\n            nf_id SERIAL PRIMARY KEY,\n            location_id INT REFERENCES user_location(location_id),\n            icao24 TEXT,\n            flight_id TEXT REFERENCES flights(flight_id),\n            timestamp TIMESTAMPTZ NOT NULL,\n            distance_km NUMERIC,\n            is_overhead BOOLEAN DEFAULT FALSE,\n            metadata JSONB\n        );\n        ","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-09-22T09:01:16.474381","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-09-22T09:01:38.729349Z","level":"error","event":"Exception ignored in: <function _collection_gced at 0x76bdad2c6ca0>","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.731248Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.744497Z","level":"error","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/event/registry.py\", line 53, in _collection_gced","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.750656Z","level":"error","event":"    def _collection_gced(ref):","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.752151Z","level":"error","event":"","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.763002Z","level":"error","event":"  File \"/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/timeout.py\", line 69, in handle_timeout","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.764720Z","level":"error","event":"    raise AirflowTaskTimeout(self.error_message)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.766651Z","level":"error","event":"airflow.exceptions.AirflowTaskTimeout: DagBag import timeout for /opt/airflow/dags/flights_above_me.py after 30.0s.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.767826Z","level":"error","event":"Please take a look at these docs to improve your DAG import time:","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.770058Z","level":"error","event":"* https://airflow.apache.org/docs/apache-airflow/3.0.0/best-practices.html#top-level-python-code","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:01:38.771472Z","level":"error","event":"* https://airflow.apache.org/docs/apache-airflow/3.0.0/best-practices.html#reducing-dag-complexity, PID: 160","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-22T09:02:06.900831","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-22T09:02:07.165523","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-09-22T09:02:07.226124","level":"info","event":"Connection Retrieved 'postgres'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-22T09:02:07.348734","level":"info","event":"Running statement: \n        CREATE TABLE IF NOT EXISTS user_location (\n            location_id SERIAL PRIMARY KEY,\n            name TEXT NOT NULL,\n            lat NUMERIC NOT NULL,\n            lon NUMERIC NOT NULL,\n            radius_km NUMERIC NOT NULL DEFAULT 30\n        );\n\n        CREATE TABLE IF NOT EXISTS aircraft (\n            icao24 TEXT PRIMARY KEY,\n            manufacturer TEXT,\n            model TEXT,\n            country TEXT,\n            operator TEXT\n        );\n\n        CREATE TABLE IF NOT EXISTS flights (\n            flight_id TEXT PRIMARY KEY,\n            icao24 TEXT REFERENCES aircraft(icao24),\n            callsign TEXT,\n            dep_airport TEXT,\n            arr_airport TEXT,\n            dep_time TIMESTAMPTZ,\n            arr_time TIMESTAMPTZ,\n            source TEXT DEFAULT 'opensky'\n        );\n\n        CREATE TABLE IF NOT EXISTS state_vectors (\n            state_id SERIAL PRIMARY KEY,\n            icao24 TEXT,\n            callsign TEXT,\n            lat NUMERIC,\n            lon NUMERIC,\n            altitude NUMERIC,\n            velocity NUMERIC,\n            heading NUMERIC,\n            timestamp TIMESTAMPTZ NOT NULL,\n            raw_json JSONB\n        );\n\n        CREATE TABLE IF NOT EXISTS nearby_flights (\n            nf_id SERIAL PRIMARY KEY,\n            location_id INT REFERENCES user_location(location_id),\n            icao24 TEXT,\n            flight_id TEXT REFERENCES flights(flight_id),\n            timestamp TIMESTAMPTZ NOT NULL,\n            distance_km NUMERIC,\n            is_overhead BOOLEAN DEFAULT FALSE,\n            metadata JSONB\n        );\n        , parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
